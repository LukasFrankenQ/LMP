logging:
  level: INFO
  format: '%(levelname)s:%(name)s:%(message)s'

run:
  name: "pypsa-lmp"

scenario:
  date:
    start: "2023-10-01"
    end: "2024-03-31"
    # - "2024-03-06"

  period:
    start: 1
    end: 48
    # - 8
    # - 9
    # - 10
    # - 11

  layout:
    - nodal
    - fti
    - eso
    - national
  
  aggregate:
    - "2024-03-05"


countries: ['GB']

# docs in https://pypsa-eur.readthedocs.io/en/latest/configuration.html#enable
enable:
  # retrieve: auto
  retrieve: false

elexon:
  bmu_date: '2024-02-02' # determines the date of the BMU list, retrieved from a snapshot of the Physical Data
  cost_spread: 1.2 # spreads the estimated costs of dispatchable generators; essentially a tuning parameter to capture the wholesale cost curve more accurately
  cost_assignment_method_cutoff: 30 # below this day-ahead wholesale price, the cost of all BMUs are scaled

boundaries: # for the network layouts 'nodal', 'fti', 'eso' gives the indices of lines representing the boundary
  # Warning! Only functional for dataset "ENTSO-E"
  nodal:
    SSE-SP: [13161, 6241, 6146, 6145, 6149, 6150]
    SCOTEX: [14109, 6139, 11758]
    SSHARN: [11778, 11780, 5225]
    SWALEX: [11515, 11519]
    ESTEX: [8705, 5185, 5194, 10414, 6329, 6326, 11743]
    SEIMP: [6121, 12746, 11742]
    FLOWSTH: [5203, 11528, 11764, 6203, 5207]
  fti:
    SSE-SP: [0]
    SCOTEX: [1]
    SSHARN: [2]
    SWALEX: []
    ESTEX: []
    SEIMP: []
    FlOWSTH: [5, 4]
  eso:
    SSE-SP: [20, 21]
    SCOTEX: [23]
    SSHARN: [24, 25]
    SWALEX: [4, 6, 10, 11]
    ESTEX: [1, 3, 6, 10, 15]
    SEIMP: [8, 12, 14]
    FLOWSTH: [1, 3, 4]
  national:
    SSE-SP: []
    SCOTEX: []
    SSHARN: []
    SWALEX: []
    ESTEX: []
    SEIMP: []

balancing:
  extra_cost:
    default: 100 # Â£/MWh; assumed default extra cost for BM trades vs wholesale

load:
  load_distribution_scenario: 'lw' # can be 'lw' (Leading the Way) or 'fs' (Falling Short)
  load_distribution_year: 2021     # only implemented for 2021 so far

lines:
  types:
    220.: "Al/St 240/40 2-bundle 220.0"
    300.: "Al/St 240/40 3-bundle 300.0"
    380.: "Al/St 240/40 4-bundle 380.0"
    500.: "Al/St 240/40 4-bundle 380.0"
    750.: "Al/St 560/50 4-bundle 750.0"
  s_max_pu: 1.
  s_nom_max: .inf
  max_extension: 0. # MW
  length_factor: 1.25
  under_construction: 'remove' # 'zero': set capacity to zero, 'remove': remove, 'keep': with full capacity

# docs in https://pypsa-eur.readthedocs.io/en/latest/configuration.html#links
links:
  p_max_pu: 1.0
  p_nom_max: .inf
  max_extension: 0. # MW
  include_tyndp: false
  under_construction: 'remove' # 'zero': set capacity to zero, 'remove': remove, 'keep': with full capacity

transformers:
  x: 0.1
  s_nom: 2000.
  type: ''

# docs in https://pypsa-eur.readthedocs.io/en/latest/configuration.html#electricity
electricity:
  network_dataset: "ENTSO-E" # can be "ENTSO-E" or "ETYS" (ETYS not functional yet!)
  voltages: [220., 300., 380., 500., 750.]
  gaslimit_enable: false
  gaslimit: false
  co2limit_enable: false
  co2limit: 7.75e+7
  co2base: 1.487e+9
  agg_p_nom_limits: data/agg_p_nom_minmax.csv

  operational_reserve:
    activate: false
    epsilon_load: 0.02
    epsilon_vres: 0.02
    contingency: 4000

  max_hours:
    battery: 6
    H2: 168

  extendable_carriers:
    Generator: []
    StorageUnit: [] # battery, H2
    Store: []
    Link: [] # H2 pipeline

  powerplants_filter: (DateOut >= 2022 or DateOut != DateOut)
  custom_powerplants: false
  everywhere_powerplants: [nuclear, oil, OCGT, CCGT, coal, lignite, geothermal, biomass]

  conventional_carriers: [nuclear, oil, OCGT, CCGT, coal, lignite, geothermal, biomass]
  renewable_carriers: [solar, onwind, offwind-ac, offwind-dc, hydro]

  estimate_renewable_capacities:
    enable: true
    from_opsd: true
    year: 2020
    expansion_limit: false
    technology_mapping:
      Offshore: [offwind-ac, offwind-dc]
      Onshore: [onwind]
      PV: [solar]

  autarky:
    enable: false
    by_country: false

clustering:
  focus_weights: false
  simplify:
    to_substations: false
    algorithm: kmeans # choose from: [hac, kmeans]
    feature: solar+onwind-time
    exclude_carriers: ['gas-fired', 'gas', 'onwind', 'hydro', 'hydro-scheme', 'wind',
       'biomass', 'battery', 'offwind', 'CHP', 'CCGT', 'floating wind',
       'coal', 'submarine power cable', 'gas turbine', 'interconnector',
       'HVDC submarine', 'cascade', 'steel mill', 'PV', 'PHS', 'nuclear',
       '', 'dam', 'solar power station', 'natural gas processing',
       'powerstation']
    remove_stubs: true
    remove_stubs_across_borders: true
  cluster_network:
    algorithm: kmeans
    feature: solar+onwind-time
    exclude_carriers: ['gas-fired', 'gas', 'onwind', 'hydro', 'hydro-scheme', 'wind',
       'biomass', 'battery', 'offwind', 'CHP', 'CCGT', 'floating wind',
       'coal', 'submarine power cable', 'gas turbine', 'interconnector',
       'HVDC submarine', 'cascade', 'steel mill', 'PV', 'PHS', 'nuclear',
       '', 'dam', 'solar power station', 'natural gas processing',
       'powerstation']
    consider_efficiency_classes: false
  aggregation_strategies:
    generators:
      committable: any
      ramp_limit_up: max
      ramp_limit_down: max

costs:
  year: 2030
  version: v0.8.0
  rooftop_share: 0.14  # based on the potentials, assuming  (0.1 kW/m2 and 10 m2/person)
  social_discountrate: 0.02
  fill_values:
    FOM: 0
    VOM: 0
    efficiency: 1
    fuel: 0
    investment: 0
    lifetime: 25
    "CO2 intensity": 0
    "discount rate": 0.07
  # Marginal and capital costs can be overwritten
  # capital_cost:
  #   onwind: 500
  marginal_cost:
    solar: 0.01
    onwind: 0.015
    offwind: 0.015
    hydro: 0.
    H2: 0.
    electrolysis: 0.
    fuel cell: 0.
    battery: 0.
    battery inverter: 0.
  emission_prices:
    enable: false
    co2: 0.
    co2_monthly_prices: false

solving:
  #tmpdir: "path/to/tmp"
  options:
    p_nom_multiplier: 1.0

    clip_p_max_pu: 1.e-2
    load_shedding: false
    noisy_costs: true
    skip_iterations: true
    rolling_horizon: false
    seed: 123
    custom_extra_functionality: "../data/custom_extra_functionality.py"
    # io_api: "direct"  # Increases performance but only supported for the highs and gurobi solvers
    # options that go into the optimize function
    track_iterations: false
    min_iterations: 4
    max_iterations: 6
    transmission_losses: 2
    linearized_unit_commitment: true
    horizon: 365

  constraints:
    CCL: false
    EQ: false
    BAU: false
    SAFE: false

  solver:
    name: gurobi
    options: gurobi-default